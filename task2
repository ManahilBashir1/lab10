import 'package:flutter/material.dart';
import 'dart:io';
import 'package:image_picker/image_picker.dart';
import 'package:path_provider/path_provider.dart';
import 'package:fluttertoast/fluttertoast.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Social Media App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: FeedScreen(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class Post {
  String id;
  String title;
  String description;
  File? image;
  DateTime timestamp;

  Post({
    required this.id,
    required this.title,
    required this.description,
    this.image,
    required this.timestamp,
  });
}

class FeedScreen extends StatefulWidget {
  @override
  _FeedScreenState createState() => _FeedScreenState();
}

class _FeedScreenState extends State<FeedScreen> {
  List<Post> posts = [];

  @override
  void initState() {
    super.initState();
    // Add some dummy data for demonstration
    posts.add(Post(
      id: '1',
      title: 'First Post',
      description: 'This is my first post on this awesome app!',
      timestamp: DateTime.now(),
    ));
    posts.add(Post(
      id: '2',
      title: 'Beautiful Sunset',
      description: 'Captured this amazing sunset yesterday evening.',
      timestamp: DateTime.now().subtract(Duration(hours: 2)),
    ));
  }

  void _navigateToUploadScreen() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => UploadScreen()),
    );

    if (result != null && result is Post) {
      setState(() {
        posts.insert(0, result);
      });
    }
  }

  void _deletePost(String postId) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Delete Post'),
          content: Text('Are you sure you want to delete this post?'),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text('No'),
            ),
            TextButton(
              onPressed: () {
                setState(() {
                  posts.removeWhere((post) => post.id == postId);
                });
                Navigator.pop(context);
                Fluttertoast.showToast(msg: 'Post deleted successfully');
              },
              child: Text('Yes'),
            ),
          ],
        );
      },
    );
  }

  void _downloadImage(File image) async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final fileName = 'image_${DateTime.now().millisecondsSinceEpoch}.jpg';
      final savedImage = await image.copy('${directory.path}/$fileName');
      
      Fluttertoast.showToast(
        msg: 'Image downloaded successfully!',
        toastLength: Toast.LENGTH_LONG,
      );
      print('Image saved to: ${savedImage.path}');
    } catch (e) {
      Fluttertoast.showToast(
        msg: 'Failed to download image: $e',
        toastLength: Toast.LENGTH_LONG,
        backgroundColor: Colors.red,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Social Feed'),
        actions: [
          IconButton(
            icon: Icon(Icons.add),
            onPressed: _navigateToUploadScreen,
          ),
        ],
      ),
      body: ListView.builder(
        itemCount: posts.length,
        itemBuilder: (context, index) {
          final post = posts[index];
          return Card(
            margin: EdgeInsets.all(8),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                ListTile(
                  title: Text(
                    post.title,
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                  subtitle: Text(post.description),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                        icon: Icon(Icons.edit, color: Colors.blue),
                        onPressed: () => _navigateToEditScreen(post),
                      ),
                      IconButton(
                        icon: Icon(Icons.delete, color: Colors.red),
                        onPressed: () => _deletePost(post.id),
                      ),
                    ],
                  ),
                ),
                if (post.image != null)
                  GestureDetector(
                    onLongPress: () => _downloadImage(post.image!),
                    child: Container(
                      height: 200,
                      width: double.infinity,
                      decoration: BoxDecoration(
                        image: DecorationImage(
                          image: FileImage(post.image!),
                          fit: BoxFit.cover,
                        ),
                      ),
                    ),
                  ),
                Padding(
                  padding: EdgeInsets.all(8),
                  child: Text(
                    'Posted on: ${post.timestamp.toString().substring(0, 16)}',
                    style: TextStyle(color: Colors.grey, fontSize: 12),
                  ),
                ),
              ],
            ),
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _navigateToUploadScreen,
        child: Icon(Icons.add),
      ),
    );
  }

  void _navigateToEditScreen(Post post) async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => UploadScreen(
          postToEdit: post,
        ),
      ),
    );

    if (result != null && result is Post) {
      setState(() {
        final index = posts.indexWhere((p) => p.id == result.id);
        if (index != -1) {
          posts[index] = result;
        }
      });
    }
  }
}

class UploadScreen extends StatefulWidget {
  final Post? postToEdit;

  UploadScreen({this.postToEdit});

  @override
  _UploadScreenState createState() => _UploadScreenState();
}

class _UploadScreenState extends State<UploadScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  File? _image;
  final ImagePicker _picker = ImagePicker();

  @override
  void initState() {
    super.initState();
    if (widget.postToEdit != null) {
      _titleController.text = widget.postToEdit!.title;
      _descriptionController.text = widget.postToEdit!.description;
      _image = widget.postToEdit!.image;
    }
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  Future<void> _pickImage() async {
    final pickedFile = await _picker.pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() {
        _image = File(pickedFile.path);
      });
    }
  }

  void _submitPost() {
    if (_formKey.currentState!.validate()) {
      final post = Post(
        id: widget.postToEdit?.id ?? DateTime.now().millisecondsSinceEpoch.toString(),
        title: _titleController.text,
        description: _descriptionController.text,
        image: _image,
        timestamp: DateTime.now(),
      );
      Navigator.pop(context, post);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.postToEdit == null ? 'Create Post' : 'Edit Post'),
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _titleController,
                decoration: InputDecoration(
                  labelText: 'Title',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a title';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16),
              TextFormField(
                controller: _descriptionController,
                decoration: InputDecoration(
                  labelText: 'Description',
                  border: OutlineInputBorder(),
                ),
                maxLines: 3,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a description';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: _pickImage,
                child: Text('Select Image'),
              ),
              SizedBox(height: 16),
              if (_image != null)
                Column(
                  children: [
                    Text(
                      'Image Preview:',
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    SizedBox(height: 8),
                    Image.file(
                      _image!,
                      height: 200,
                      width: double.infinity,
                      fit: BoxFit.cover,
                    ),
                    SizedBox(height: 8),
                    Text(
                      'Long press on image in feed to download',
                      style: TextStyle(color: Colors.grey, fontSize: 12),
                    ),
                  ],
                ),
              SizedBox(height: 24),
              ElevatedButton(
                onPressed: _submitPost,
                child: Text(widget.postToEdit == null ? 'Upload Post' : 'Update Post'),
                style: ElevatedButton.styleFrom(
                  minimumSize: Size(double.infinity, 50),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
} 
